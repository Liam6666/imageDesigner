

    private fun compress(srcData: ByteArray): ByteArray? {
        var byteOutStream: ByteArrayOutputStream? = null
        var byteInStream: ByteArrayInputStream? = null
        var gos: GZIPOutputStream? = null
        try {
            byteOutStream = ByteArrayOutputStream()
            gos = GZIPOutputStream(byteOutStream)
            byteInStream = ByteArrayInputStream(srcData)
            val data = ByteArray(1024)
            var count: Int
            while (true) {
                count = byteInStream.read(data)
                if (count < 0) break
                gos.write(data, 0, count)
            }
            gos.finish()
            return byteOutStream.toByteArray()
        } catch (e: IOException) {
            e.printStackTrace()
        } finally {
            closeStream(byteOutStream)
            closeStream(byteInStream)
            closeStream(gos)
        }
        return null
    }


    private fun closeStream(stream: Closeable?) {
        try {
            stream?.close()
        } catch (ignore: Exception) {
        }

    }
